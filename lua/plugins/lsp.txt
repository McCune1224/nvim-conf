return {
  -- LSP
  {
    'neovim/nvim-lspconfig',
    event = { 'BufReadPost' },
    cmd = { 'LspInfo', 'LspInstall', 'LspUninstall', 'Mason' },
    dependencies = {
      -- Plugin(s) and UI to automatically install LSPs to stdpath
      'williamboman/mason.nvim',
      'williamboman/mason-lspconfig.nvim',
      'WhoIsSethDaniel/mason-tool-installer.nvim',

      -- Install lsp autocompletions
      'hrsh7th/cmp-nvim-lsp',


      -- `neodev` configures Lua LSP for your Neovim config, runtime and plugins
      -- used for completion, annotations and signatures of Neovim apis
      { 'folke/neodev.nvim', opts = {} },

      -- Progress/Status update for LSP
      { 'j-hui/fidget.nvim', opts = {} },
    },
    config = function()
      local map = vim.keymap.set
      local map_lsp_keybinds = function(buffer_number)
        map('n', '<leader>rn', vim.lsp.buf.rename, { desc = 'LSP: [R]e[n]ame', buffer = buffer_number })
        map('n', '<leader>ca', vim.lsp.buf.code_action, { desc = 'LSP: [C]ode [A]ction', buffer = buffer_number })

        map('n', 'gd', vim.lsp.buf.definition, { desc = 'LSP: [G]oto [D]efinition', buffer = buffer_number })

        -- Telescope LSP keybinds --
        map('n', 'gr', require('telescope.builtin').lsp_references,
          { desc = 'LSP: [G]oto [R]eferences', buffer = buffer_number })

        map('n', 'gi', require('telescope.builtin').lsp_implementations,
          { desc = 'LSP: [G]oto [I]mplementation', buffer = buffer_number })

        map('n', '<leader>bs', require('telescope.builtin').lsp_document_symbols,
          { desc = 'LSP: [B]uffer [S]ymbols', buffer = buffer_number })

        map('n', '<leader>ps', require('telescope.builtin').lsp_workspace_symbols,
          { desc = 'LSP: [P]roject [S]ymbols', buffer = buffer_number })

        -- See `:help K` for why this keymap
        -- nnoremap("K", vim.lsp.buf.hover, { desc = "LSP: Hover Documentation", buffer = buffer_number })
        map('n', '<leader>k', vim.lsp.buf.signature_help,
          { desc = 'LSP: Signature Documentation', buffer = buffer_number })
        map('i', '<C-k>', vim.lsp.buf.signature_help, { desc = 'LSP: Signature Documentation', buffer = buffer_number })

        -- Lesser used LSP functionality
        map('n', 'gD', vim.lsp.buf.declaration, { desc = 'LSP: [G]oto [D]eclaration', buffer = buffer_number })
        map('n', 'td', vim.lsp.buf.type_definition, { desc = 'LSP: [T]ype [D]efinition', buffer = buffer_number })
      end


      -- Default handlers for LSP
      local default_handlers = {
        ['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, { border = 'rounded' }),
        ['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, { border = 'rounded' }),
      }

      -- Function to run when neovim connects to a Lsp client
      ---@diagnostic disable-next-line: unused-local
      local on_attach = function(_client, buffer_number)
        -- Pass the current buffer to map lsp keybinds
        map_lsp_keybinds(buffer_number)
      end

      -- LSP servers and clients are able to communicate to each other what features they support.
      --  By default, Neovim doesn't support everything that is in the LSP Specification.
      --  When you add nvim-cmp, luasnip, etc. Neovim now has *more* capabilities.
      --  So, we create new capabilities with nvim cmp, and then broadcast that to the servers.
      local capabilities = vim.lsp.protocol.make_client_capabilities()
      capabilities = vim.tbl_deep_extend('force', capabilities, require('cmp_nvim_lsp').default_capabilities())

      -- LSP servers to install (see list here: https://github.com/williamboman/mason-lspconfig.nvim#available-lsp-servers )
      --  Add any additional override configuration in the following tables. Available keys are:
      --  - cmd (table): Override the default command used to start the server
      --  - filetypes (table): Override the default list of associated filetypes for the server
      --  - capabilities (table): Override fields in capabilities. Can be used to disable certain LSP features.
      --  - settings (table): Override the default settings passed when initializing the server.
      --        For example, to see the options for `lua_ls`, you could go to: https://luals.github.io/wiki/settings/

      local servers = {
        clangd = {},
        gopls = {},
        rust_analyzer = {},
        tsserver = {},
        svelte = {},
        lua_ls = {}
      }

      local formatters = {
        prettierd = {},
        stylua = {},
      }

      local manually_installed_servers = {}

      local mason_tools_to_install = vim.tbl_keys(vim.tbl_deep_extend('force', {}, servers, formatters))

      local ensure_installed = vim.tbl_filter(function(name)
        return not vim.tbl_contains(manually_installed_servers, name)
      end, mason_tools_to_install)


      -- You can add other tools here that you want Mason to install
      -- for you, so that they are available from within Neovim.
      -- local ensure_installed = vim.tbl_keys(servers or {})
      -- vim.list_extend(ensure_installed, {
      --   'stylua', -- Used to format Lua code
      -- })
      -- require('mason-tool-installer').setup { ensure_installed = ensure_installed }

      require('mason-tool-installer').setup {
        auto_update = true,
        run_on_start = true,
        start_delay = 3000,
        debounce_hours = 12,
        ensure_installed = ensure_installed,
      }

      -- Iterate over our servers and set them up
      for name, config in pairs(servers) do
        require('lspconfig')[name].setup {
          autostart = config.autostart,
          cmd = config.cmd,
          capabilities = capabilities,
          filetypes = config.filetypes,
          handlers = vim.tbl_deep_extend('force', {}, default_handlers, config.handlers or {}),
          on_attach = on_attach,
          settings = config.settings,
          root_dir = config.root_dir,
        }
      end

      -- Setup mason so it can manage 3rd party LSP servers
      require('mason').setup {
        ui = {
          border = 'rounded',
        },
      }

      require('mason-lspconfig').setup()

      -- Configure borderd for LspInfo ui
      require('lspconfig.ui.windows').default_options.border = 'rounded'

      -- Configure diagnostics border
      vim.diagnostic.config {
        float = {
          border = 'rounded',
        },
      }
    end,
  },

  -- Auto formatting
  {
    'stevearc/conform.nvim',
    event = { 'BufWritePre' },
    cmd = { 'ConformInfo' },
    opts = {
      notify_on_error = false,
      format_after_save = {
        async = true,
        timeout_ms = 500,
        lsp_fallback = true,
      },
      formatters_by_ft = {
        javascript = { { 'prettierd', 'prettier' } },
        typescript = { { 'prettierd', 'prettier' } },
        typescriptreact = { { 'prettierd', 'prettier' } },
        lua = { 'stylua' },
      },
    },
  },
}
